apiVersion: v1
kind: ConfigMap
metadata:
  name: alloy-config
  namespace: monitoring
data:
  config.alloy: |
    // Basic Alloy configuration for OpenTelemetry
    logging {
      level = "info"
      format = "logfmt"
    }

    // OTLP receiver - this is where your apps will send data
    otelcol.receiver.otlp "default" {
      grpc {
        endpoint = "0.0.0.0:4317"
      }
      http {
        endpoint = "0.0.0.0:4318"
      }
      
      output {
        metrics = [otelcol.processor.resourcedetection.basic_detection.input]
        logs    = [otelcol.processor.resourcedetection.basic_detection.input]
        traces  = [otelcol.processor.resourcedetection.basic_detection.input]
      }
    }

    // Step 1: Detect basic resource attributes
    otelcol.processor.resourcedetection "basic_detection" {
      detectors = ["env", "system"]
      
      output {
        metrics = [otelcol.processor.transform.namespace_to_env.input]
        logs    = [otelcol.processor.transform.namespace_to_env.input]
        traces  = [otelcol.processor.transform.namespace_to_env.input]
      }
    }

    // Step 2: Transform namespace to environment and add custom attributes
    otelcol.processor.transform "namespace_to_env" {
      error_mode = "ignore"
      
      metric_statements {
        context = "resource"
        statements = [
          "set(attributes[\"environment\"], attributes[\"k8s.namespace.name\"]) where attributes[\"k8s.namespace.name\"] != nil",
          "set(attributes[\"cluster_name\"], \"kind-cluster\") where true",
          "set(attributes[\"collector\"], \"alloy\") where true",
        ]
      }
      
      log_statements {
        context = "resource"
        statements = [
          "set(attributes[\"environment\"], attributes[\"k8s.namespace.name\"]) where attributes[\"k8s.namespace.name\"] != nil",
          "set(attributes[\"cluster_name\"], \"kind-cluster\") where true", 
          "set(attributes[\"collector\"], \"alloy\") where true",
        ]
      }
      
      trace_statements {
        context = "resource"
        statements = [
          "set(attributes[\"environment\"], attributes[\"k8s.namespace.name\"]) where attributes[\"k8s.namespace.name\"] != nil",
          "set(attributes[\"cluster_name\"], \"kind-cluster\") where true",
          "set(attributes[\"collector\"], \"alloy\") where true", 
        ]
      }
      
      output {
        metrics = [otelcol.exporter.prometheus.prometheus.input]
        logs    = [otelcol.exporter.otlp.loki.input]
        traces  = [otelcol.exporter.otlp.tempo.input]
      }
    }

    // Export metrics to Prometheus format
    otelcol.exporter.prometheus "prometheus" {
      forward_to = [prometheus.remote_write.prometheus.receiver]
    }

    // Export metrics to Prometheus via remote write
    prometheus.remote_write "prometheus" {
      endpoint {
        url = "http://lgtm-stack-prometheus:9090/api/v1/write"
      }
    }


    // Export logs to Loki via OTLP
    otelcol.exporter.otlp "loki" {
      client {
        endpoint = "http://lgtm-stack-loki:3100"
        tls {
          insecure = true
        }
      }
    }

    // Export traces to Tempo via OTLP
    otelcol.exporter.otlp "tempo" {
      client {
        endpoint = "http://lgtm-stack-tempo:3200"
        tls {
          insecure = true
        }
      }
    }

    // OTLP-only approach - no Prometheus scraping
    // Your apps will send metrics directly via OTLP to ports 4317/4318
